% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/l_system.R
\name{l_system}
\alias{l_system}
\alias{grow_l_system}
\alias{convert_l_system}
\alias{plot_l_system}
\title{L-system}
\usage{
grow_l_system(axiom, rules, n = 1)

convert_l_system(instructions, angle, initial_angle = pi/2, draw_f = NULL)

plot_l_system(l_lines, ...)
}
\arguments{
\item{axiom}{A string of symbols representing the initial state of the
system.}

\item{rules}{A list of named strings forming the rules.}

\item{n}{The number of iterations.}

\item{instructions}{A string of symbols to convert to line segments.}

\item{angle}{The angle in radians which determines the change in direction
for every "+" or "-".}

\item{initial_angle}{The initial direction of the first line in radians.}

\item{draw_f}{A character vector of symbols the replace with "F" in the
instructions.}

\item{l_lines}{A data frame with the columns x0, y0, x1, and y1 determining
the endpoints of the line segments.}

\item{...}{Other parameters passed on to
\code{\link[graphics:segments]{segments}}.}
}
\value{
\code{grow_l_system} returns a string of instructions after \code{n}
  iterations of the system.

  \code{convert_l_system} returns a data frame with the columns x0, y0, x1,
  and y1 determining the endpoints of the line segments.

  \code{plot_l_system} returns NULL.
}
\description{
Expand, convert and plot L-systems or Lindenmayer systems.
}
\examples{
par(mfrow = c(1, 3))

# plant:
l_system <- grow_l_system(
    axiom = "X",
    rules = list(
        `X` = "F+[[X]-X]-F[-FX]+X",
        `F` = "FF"
    ),
    n = 7
)
l_lines <- convert_l_system(
    instructions = l_system,
    angle = pi * 0.15,
    initial_angle = pi * 0.45
)
plot_l_system(
    l_lines = l_lines,
    col = "forestgreen"
)

# dragon curve:
l_system <- grow_l_system(
    axiom = "FX",
    rules = list(
        `X` = "X+YF+",
        `Y` = "-FX-Y"
    ),
    n = 12
)
l_lines <- convert_l_system(
    instructions = l_system,
    angle = pi / 2
)
plot_l_system(l_lines = l_lines)

# sierpinski triangle:
l_system <- grow_l_system(
    axiom = "F-G-G",
    rules = list(
        `F` = "F-G+F+G-F",
        `G` = "GG"
    ),
    n = 6)
l_lines <- convert_l_system(
    instructions = l_system,
    angle = 2 * pi / 3,
    initial_angle = pi / 3,
    draw_f = "G"
)
plot_l_system(l_lines = l_lines)
}
